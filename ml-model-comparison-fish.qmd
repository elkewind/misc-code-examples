---
title: "ML Model Comparison for Fish Threat in R"
author: "Elke Windschitl"
date: "2022-12-09"
format: html
editor: source
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE,
                      message = FALSE)
```

Description: In this qmd, I evaluate different supervised machine learning algorithms for predicting IUCN Red List status of fish based on ecological and morphological characteristics. These characteristics were retrieved from FishBase and joined with the IUCN data in a separate script.

## Introduction

Global human activity threatens many species with extinction. According to the International Union and Conservation of Nature (IUCN), “More than 41,000 species are threatened with extinction. That is still 28% of all assessed species.” [1]. Increased extinction and loss of biodiversity can have severe ecological, economic, and cultural impacts. Cardinale et al.’s deep dive into biodiversity and ecosystem services research conclude that biodiversity loss reduces ecological communities’ efficiency, stability, and productivity. Decreased productivity from ecosystem services can have a negative impact on ecosystem economics [2]. Additionally, cultures worldwide have strong ties to local flora and fauna, much of which now face extinction risk. Improving understanding of extinction risk is ecologically, economically, and culturally important.

Wildlife scientists have been working to understand what ecological traits of vertebrates predict threat level, and what common risk factors drive those threat level rates. Munstermann et al. investigate what terrestrial vertebrate functional groups are most at risk of extinction threat and find that cave dwelling amphibian, arboreal quadrupedal mammals, aerial and scavenging birds, and pedal squamates are at high risk [3]. This knowledge can help inform policies and practices with the goal to decrease threats of extinction of wildlife. However, less comprehensive research has been done to conduct similar analyses on marine species.

The IUCN Red List has many species that are listed as "Data Deficient" or "Not Evaluated". Filling in these data gaps is extremely important when it comes to conservation. In marine species, evaluating these populations can prove challenging. It can be helpful to build off of existing knowledge to inform where evaluation resources should be spent. Here, I propose to build a machine learning model that predicts binary Red List status of saltwater fish based on their ecological and morphological traits according to FishBase. I then apply the most successful model to Red List Data Deficient and Not Evaluated species. 

This work builds off of my previous work [Identifying Key Traits in Hawaiian Fish that Predict Risk of Extinction](https://elkewind.github.io/posts/2022-12-02-hawaiian-fish-analysis/). However, here I am looking at all fish listed on the IUCN Red List -- not just those in Hawaii -- and I am using a Tidymodels machine learning approach.

## The Data

For my analyses I use the IUCN Red List data accessed via the IUCN Red List API [1] and package rredlist [4]. Consistent with Munstermann et al., living species listed as ‘Vulnerable’, ‘Endangered’, or ‘Critically Endangered’ were categorized as ‘Threatened’. Living species listed as ‘Least Concern’ and ‘Near Threatened’ were categorized as ‘Nonthreatened’ [3]. The IUCN Red List data are limited in that many marine species have not been listed yet or have been identified as too data deficient to be evaluated. The lack of data on elusive fish may introduce bias into the models.

Fish ecological data were accessed from FishBase [5] via package rfishbase [6]. Different species in the FishBase data were originally described by different people, possibly leading to errors or biases. Measurement errors in length may be present, as there are various common ways to measure the length of a fish. The species recorded in FishBase may be biased towards fish with commercial value. Data were wrangled in R and formatted in a tidy data table with the following variables.

```{r include=FALSE}
library(tidyverse)
library(knitr)
# Read in data
fish_dat <- read_csv("/Users/elkewindschitl/Documents/data-sci/fish_data.csv") %>%
  filter(!is.na(IsOfConcern)) %>% 
  slice_head(n = 10) %>% 
  kable()
```

## Methods

To get started, there are several packages I will be using. *Tidyverse* packages help with further cleaning and preparing data. *Tidymodels* packages have almost all of what I need for the machine learning steps. *kknn* helps me build my knn model. *hrbrthemes* and *viridis* are used to quickly make aesthetically pleasing looking figures. *knitr* is used to create kable tables. *baguette* is used in my bagging model. *doParallel* allows for parallel computing on my laptop. *vip* helps to identify variable importance.

```{r}
# Load libraries
library(tidyverse)
library(tidymodels)
#library(rsample)   
#library(recipes)
#library(skimr)
library(kknn)
library(hrbrthemes)
library(viridis)
library(knitr)
#library(workflows)
library(baguette)
library(doParallel)
#library(forcats)
#library(glmnet)
library(vip)
```

First I read in the data. These data were cleaned and joined in a separate script, but they will still need a bit of preprocessing. The outcome variable in this dataset is labeled IsOfConcern and indicates if the species is at risk or extinction (1) or not (0). I start out by exploring the data dimensions. 

```{r}
# Read in data
fish_dat_full <- read_csv("/Users/elkewindschitl/Documents/data-sci/fish_data.csv") 
fish_dat <- fish_dat_full %>%
  filter(!is.na(IsOfConcern)) # remove columns that don't have outcome variable

# Explore some characteristics of the dataset
ncol(fish_dat)
nrow(fish_dat)
fish_dat %>% 
  group_by(IsOfConcern) %>%
  count()
```

### Data prep

There are a lot on NA values in this dataset. I have a lot of columns already, so I can reduce that by removing columns that have a high proportion of NA values. Here I only keep columns where less than 20% of rows have NA values.

```{r}
# Calculate the proportion of NA values in each column
na_proportion <- colMeans(is.na(fish_dat), na.rm = TRUE)

#I want to remove rows with extreme NA counts (more than 20%)
# Define the threshold (20% or 0.20)
threshold <- 0.20

# Find columns with more than the threshold proportion of NA values
columns_meeting_threshold <- names(na_proportion[na_proportion <= threshold])

# Print the column names that meet the threshold
print(columns_meeting_threshold)

# Select for just those columns that meet my criteria
fish_short <- fish_dat %>% 
  select(all_of(columns_meeting_threshold))
```

There is still more to be done. I want to make sure numeric columns are numeric, and that character columns are treated as factors. I need to make sure my outcome variable is a factor as well. I have a small enough data frame that I am able to do this by looking at which columns are character and mutating them to be factors. I want unordered factors, and I neeed to remove columns that are identifiers rather than features. Because some of the algorithms I am working with here do not handle missing data well, I chose to remove all of the rows that had NA values. This did unfortunately cut down on the amount of data that I have to train and test the algorithms on.

```{r}
# Find character columns that need to be converted to factor
sapply(fish_short, class)

# List of character columns to convert to factors
character_columns_to_convert <- c("GenusSpecies", "BodyShapeI", "DemersPelag", "AirBreathing", "PriceCateg", "UsedforAquaculture", "Dangerous", "Electrogenic", "MainCommonName")

# Convert the specified character columns to factors
fish <- fish_short %>%
  mutate(across(all_of(character_columns_to_convert), as.factor))
# Check the new df
sapply(fish, class)

# If feature is a factor DON'T order, remove identifying columns
fish <- fish %>% mutate_if(is.ordered, .funs = factor, ordered = F)  %>% 
  select(-GenusSpecies) %>% 
  select(-SpecCode) %>% 
  select(-MainCommonName)

# Make outcome factor
fish$IsOfConcern <- as.factor(fish$IsOfConcern)
# Remove rows with any remaining missing values (shouldn't be any, but in case)
fish <- na.omit(fish)
```

After my data are prepped, I need to split the data into training and testing data sets. I use a 70/30 split. I have unbalanced data, so I stratafy by my outcome variable, IsOfConcern

```{r}
set.seed(1234)
# Initial split of data, default 70/30
fish_split <- initial_split(fish, prop = 0.7, strata = IsOfConcern)
fish_train <- training(fish_split)  # Training data
fish_test <- testing(fish_split)    # Test data

```

### Preprocessing

I create a recipe for the preprocessing steps used. I use dummy columns to make all the factor (categorical) variables have their own column. I remove columns where there is no variation in the data. Then I normalize the numeric columns because the lasso and knn algorithms require normalization to avoid certain features dominating the model. I use the same preprocessing steps for all algorithms for adequate comparison. 

```{r}
# Preprocess the data within the recipe
fish_recipe <- recipe(IsOfConcern ~ ., data = fish_train) %>% 
  step_dummy(all_factor(), -all_outcomes(), one_hot = TRUE) %>% 
  step_zv(all_predictors()) %>%  
  step_normalize(all_numeric(), -all_outcomes())

# Check test and train dfs look as expected
prepped <- fish_recipe %>% 
  prep()
fish_baked_train <- bake(prepped, fish_train)
fish_baked_test <- bake(prepped, fish_test)

# Check for NA values in the entire dataframes
any(is.na(fish_baked_train))
any(is.na(fish_baked_test))
```

### Dummy Classifier

Because my data are unbalanced with many more non-threatened species, if a model always chose non-threatened it would have a high accuracy. Of course, that is not very helpful when trying to predict with species that *might be* threatened. Here I derive a dummy accuracy by calculating the accuracy of a model that always predicts non-threatened. This will serve as a baseline for if a model is performing well (better than the dummy) or not.

```{r}
# Calculate dummy classifier for baseline comparison
# Calculate the number of rows where IsOfConcern is 0
num_is_0 <- sum(fish_test$IsOfConcern == 0)

# Calculate the number of rows where IsOfConcern is not 0
num_is_not_0 <- nrow(fish_test) - num_is_0

# Calculate the accuracy of the dummy classifier (always predicting the majority class)
dummy <- num_is_0 / nrow(fish_test)
```

The dummy classifier accuracy is `{r} dummy`. This will serve as the baseline for other algorithms.

### Lasso for Classification

```{r}
set.seed(123)

#set up k-fold cv. This can be used for all the algorithms
fish_cv = fish_train %>% 
  vfold_cv(v = 10,
           strata = IsOfConcern)
fish_cv

# Set specifications
tune_l_spec <- logistic_reg(penalty = tune(), mixture = 1) %>%
  set_engine("glmnet")

# Define a workflow
wf_l <- workflow() %>%
  add_model(tune_l_spec) %>% 
  add_recipe(fish_recipe)
# set grid
lambda_grid <- grid_regular(penalty(), levels = 50)

doParallel::registerDoParallel()
set.seed(123)

# Tune lasso model
lasso_grid <-   wf_l %>% 
  tune_grid(
    add_model(tune_l_spec),
    resamples = fish_cv,
    grid = lambda_grid
)

# Collect metrics
lasso_grid %>%
  collect_metrics()

# Plot the mean accuracy and AUC at each penalty
lasso_grid %>%
  collect_metrics() %>%
  ggplot(aes(penalty, mean, color = .metric)) +
  geom_errorbar(aes(ymin = mean - std_err,
                    ymax = mean + std_err),
  alpha = 0.5) +
  geom_line(size = 1.5) +
  facet_wrap(~.metric, scales = "free", nrow = 2) +
  scale_x_log10() +
  theme_minimal() +
  theme(legend.position = "none")

# Select the model with the highest accuracy
best_lasso <- lasso_grid %>%
  select_best("accuracy")

# Plot the variable importance
# final_lasso %>%
#   fit(fish_train) %>%
#   pull_workflow_fit() %>%
#   vi(lambda = best_lasso$penalty) %>%
#   mutate(
#     Importance = abs(Importance),
#     Variable = fct_reorder(Variable, Importance)
#   ) %>%
#   ggplot(aes(x = Importance, y = Variable, fill = Sign)) +
#   geom_col() +
#   scale_x_continuous(expand = c(0, 0)) +
#   labs(y = NULL)

# Perform a last fit to see how the model performs on the test data
final_lasso_fit <- last_fit(final_lasso, IsOfConcern~., fish_split) %>% 
  collect_metrics()

# Grab the model accuracy on the testing data
final_lasso_accuracy <- final_lasso_fit %>%
  filter(.metric == "accuracy") %>%
  pull(.estimate)
final_lasso_auc <- final_lasso_fit %>%
  filter(.metric == "roc_auc") %>%
  pull(.estimate)

```

The accuracy for the lasso model was `r final_lasso_accuracy` which is slightly better than our dummy classifier that had an accuracy of `r dummy`. This model had an AUC of `r final_lasso_auc`. 

### K-Nearest Neighbor

```{r}
# Define the KNN model with tuning
knn_spec_tune <- nearest_neighbor(neighbors = tune()) %>% # tune k
  set_mode("classification") %>% 
  set_engine("kknn")

# Check the model
knn_spec_tune

# Define a new workflow
wf_knn_tune <- workflow() %>% 
  add_model(knn_spec_tune) %>% 
  add_recipe(fish_recipe)
    
# Fit the workflow on the predefined folds and hyperparameters
fit_knn_cv <- wf_knn_tune %>% 
  tune_grid( 
    fish_cv, 
    grid = data.frame(neighbors = c(1,5,10,15,seq(20,100,10))))
    
# Check the performance with collect_metrics()
print(n = 24, fit_knn_cv %>% 
        collect_metrics()) %>% 
  head()

# The final workflow for our KNN model
final_knn_wf <-
  wf_knn_tune %>% 
  finalize_workflow(select_best(fit_knn_cv))

# Check out the final workflow object
final_knn_wf

# Use last_fit() approach to apply model to test data
final_knn_fit <- final_knn_wf %>% last_fit(fish_split)

# Collect metrics on the test data
tibble_knn <- final_knn_fit %>% collect_metrics()
tibble_knn

final_knn_accuracy <- tibble_knn %>%
  filter(.metric == "accuracy") %>%
  pull(.estimate)
final_knn_auc <- tibble_knn %>%
  filter(.metric == "roc_auc") %>%
  pull(.estimate)
```

We see here that our k-nearest neighbors model had a slightly higher accuracy at predicting threat status than the dummy classifier, but not by much. The accuracy of the model was `r final_knn_accuracy`. This model had an AUC of `r final_knn_auc`. 

### Decision Tree

```{r}
# Tell the model that we are tuning hyperparams
tree_spec_tune <- decision_tree(
  cost_complexity = tune(),
  tree_depth = tune(),
  min_n = tune()) %>% 
  set_engine("rpart") %>% 
  set_mode("classification")

# Set up grid
tree_grid <- grid_regular(cost_complexity(), tree_depth(), min_n(), levels = 5)

# Check grid
tree_grid

# Define a workflow with the recipe and specification
wf_tree_tune <- workflow() %>% 
  add_recipe(fish_recipe) %>% 
  add_model(tree_spec_tune)

doParallel::registerDoParallel(cores = 3) #build trees in parallel

# Tune
tree_rs <- tune_grid(
  wf_tree_tune,
  IsOfConcern~.,
  resamples = fish_cv,
  grid = tree_grid,
  metrics = metric_set(accuracy)
)

# Check the results of tuning
tree_rs

# Use autoplot() to examine how different parameter configurations relate to accuracy
autoplot(tree_rs) + 
  theme_light()

# Select best hyperparameters
show_best(tree_rs)
select_best(tree_rs)

final_tree <- finalize_model(tree_spec_tune, select_best(tree_rs))
```

```{r}
final_tree_fit <- last_fit(final_tree, IsOfConcern~., fish_split) # does training fit then final prediction as well
final_tree_fit$.predictions
final_tree_fit$.metrics

tibble_tree <- final_tree_fit %>% collect_metrics()
tibble_tree

final_tree_accuracy <- tibble_tree %>%
  filter(.metric == "accuracy") %>%
  pull(.estimate)

final_tree_auc <- tibble_tree %>%
  filter(.metric == "roc_auc") %>%
  pull(.estimate)

print(paste0("We see here that our decision tree model had a similar accuracy at predicting threat status than the dummy classifier. The accuracy of the decision tree was ", round(final_tree_accuracy, 3), ". The AUC is ", round(final_tree_auc, 3), "."))
```

### Bagging

```{r}
set.seed(123)
# Bagging specifications
bag_spec <- 
  bag_tree(cost_complexity = tune(),
  tree_depth = tune(),
  min_n = tune()) %>% 
  set_engine("rpart", times = 75) %>% # 25 ensemble members 
  set_mode("classification")

bag_grid <- grid_regular(cost_complexity(), tree_depth(), min_n(), levels = 5)

bag_grid
```

```{r}
wf_bag <- workflow() %>% 
  add_recipe(fish_recipe) %>% 
  add_model(bag_spec)
```

```{r}
doParallel::registerDoParallel() #build trees in parallel

bag_rs <- tune_grid(
  wf_bag,
  IsOfConcern~.,
  resamples = fish_cv,
  grid = bag_grid,
  metrics = metric_set(accuracy)
)

bag_rs
```

```{r}
# Use autoplot() to examine how different parameter configurations relate to accuracy 
autoplot(bag_rs) + theme_light()
```

```{r}
# Select hyperparameters
show_best(bag_rs)
select_best(bag_rs)
```

```{r}
final_bag <- finalize_model(bag_spec, select_best(bag_rs))
```


```{r}
final_bag_fit <- last_fit(final_bag, IsOfConcern~., fish_split) # does training fit then final prediction as well
final_bag_fit$.predictions
final_bag_fit$.metrics

tibble_bag <- final_bag_fit %>% collect_metrics()
tibble_bag

final_bag_accuracy <- tibble_bag %>%
  filter(.metric == "accuracy") %>%
  pull(.estimate)

print(paste0("We see here that our bagging model had a lower accuracy at predicting threat status than the decision tree and about the same accuracy as the dummy classifier. The accuracy of the bagging was ", round(final_bag_accuracy, 3), ". This is still lower than the knn model."))
```

### Random Forest

```{r}
set.seed(123)
# Bagging specifications
forest_spec <- 
  rand_forest(min_n = tune(),
              mtry = tune(),
              trees = tune()) %>%  # Specify imputation method since NAs causing problem
  set_engine("ranger") %>%
  set_mode("classification")

forest_grid <- grid_regular(min_n(), mtry(c(1,13)), trees(), levels = 5)

forest_grid
```

```{r}
wf_forest <- workflow() %>% 
  add_recipe(fish_recipe) %>% 
  add_model(forest_spec)
```

```{r}
doParallel::registerDoParallel() #build trees in parallel

forest_rs <- tune_grid(
  wf_forest,
  IsOfConcern~.,
  resamples = fish_cv,
  grid = forest_grid,
  metrics = metric_set(accuracy)
)

forest_rs
```

```{r}
# Use autoplot() to examine how different parameter configurations relate to accuracy 
autoplot(forest_rs) + theme_light()
```

```{r}
# Select hyperparameters
show_best(forest_rs)
select_best(forest_rs)
```

```{r}
final_forest <- finalize_model(forest_spec, select_best(forest_rs))
```

```{r}
final_forest_fit <- last_fit(final_forest, IsOfConcern~., fish_split)

final_forest_fit$.predictions
final_forest_fit$.metrics

tibble_forest <- final_forest_fit %>% collect_metrics()
tibble_forest

final_forest_accuracy <- tibble_forest %>%
  filter(.metric == "accuracy") %>%
  pull(.estimate)

print(paste0("We see here that our random forest had the highest accuracy at predicting threat status than the other models. The accuracy of the forest was ", round(final_forest_accuracy, 3), "."))
```

### Boosting

```{r}
# Tune learning rate first
lr_spec <- parsnip::boost_tree(mode = "classification",
                                engine = "xgboost",
                                trees = 3000,
                                learn_rate = tune())

# Set up tuning grid
lr_grid <- expand.grid(learn_rate = seq(0.0001, 0.5, length.out = 50))

# Set up workflow
wf_lr_tune <- workflow() %>% 
  add_recipe(fish_recipe) %>% 
  add_model(lr_spec)

doParallel::registerDoParallel()
set.seed(123)

# Tune
lr_rs <- tune_grid(
  wf_lr_tune,
  IsOfConcern~.,
  resamples = fish_cv,
  grid = lr_grid
)
```

```{r}
# Identify best values from the tuning process
lr_rs %>%
  tune::show_best(metric = "accuracy") %>%
  slice_head(n = 5) %>% 
  kable(caption = "Performance of the best models and the associated estimates for the learning rate parameter values.")

best_learn <- lr_rs %>%
  tune::select_best("accuracy")
```

```{r}
# Tune tree parameters next
# Create a new specification where setting the learning rate and tune the tree parameters
boost_tree_spec <- parsnip::boost_tree(mode = "classification",
                                engine = "xgboost",
                                trees = 3000,
                                learn_rate = best_learn$learn_rate,
                                min_n = tune(),
                                tree_depth = tune(),
                                loss_reduction = tune()
                                )
```

```{r}
# Define parameters to be tuned
boost_params <- dials::parameters(
  min_n(),
  tree_depth(),
  loss_reduction()
)

# Set up a tuning grid using grid_max_entropy() to get a representative sampling of the parameter space.
boost_tree_grid <- dials::grid_max_entropy(boost_params, size = 50)

# Set up workflow
wf_boost_tree_tune <- workflow() %>% 
  add_recipe(fish_recipe) %>% 
  add_model(boost_tree_spec)

set.seed(123)
doParallel::registerDoParallel()

# Tune
boost_tree_rs <- tune_grid(
  wf_boost_tree_tune,
  IsOfConcern~.,
  resamples = fish_cv,
  grid = boost_tree_grid
)
```

```{r}
# Identify best values from the tuning process
boost_tree_rs %>%
  tune::show_best(metric = "accuracy") %>% 
  slice_head(n = 5) %>% 
  kable(caption = "Performance of the best models and the associated estimates for the tree parameter values.")

boost_best_trees <- boost_tree_rs %>%
  tune::select_best("accuracy")
```

```{r}
# Tune Stochastic Parameters
# Create another new specification where setting the learning rate and tree parameters and tune the stochastic parameters.
boost_stoc_spec <- parsnip::boost_tree(mode = "classification",
                                engine = "xgboost",
                                trees = 3000,
                                learn_rate = best_learn$learn_rate,
                                min_n = boost_best_trees$min_n,
                                tree_depth = boost_best_trees$tree_depth,
                                mtry = tune(),                   
                                loss_reduction = boost_best_trees$loss_reduction,
                                sample_size = tune(),
                                stop_iter = tune()
                                )

# Set up a tuning grid using grid_max_entropy() again.
# Define parameters to be tuned
boost_stoc_params <- dials::parameters(
  finalize(mtry(),
           select(fish_baked_train,-IsOfConcern)),
  sample_size = sample_prop(c(.4, .9)),
  stop_iter())

# Set up grid
boost_stoc_grid <- dials::grid_max_entropy(boost_stoc_params, size = 50)

# Set up workflow
wf_boost_stoc <- workflow() %>% 
  add_recipe(fish_recipe) %>% 
  add_model(boost_stoc_spec)

set.seed(123)
doParallel::registerDoParallel()

# Tune
boost_stoc_rs <- tune_grid(
  wf_boost_stoc,
  IsOfConcern~.,
  resamples = fish_cv,
  grid = boost_stoc_grid
)
```

```{r}
# Identify best values from the tuning process
boost_stoc_rs %>%
  tune::show_best(metric = "accuracy") %>%
  slice_head(n = 5) %>% 
  kable(caption = "Performance of the best models and the associated estimates for the stochastic parameter values.")

boost_best_stoch <- boost_stoc_rs %>%
  tune::select_best("accuracy")
```

```{r}
# Finalize workflow
# I assemble final workflow with all of the optimized parameters and do a final fit.
boost_final_spec <- parsnip::boost_tree(mode = "classification",
                                engine = "xgboost",
                                trees = 1000,
                                learn_rate = best_learn$learn_rate,
                                min_n = boost_best_trees$min_n,
                                tree_depth = boost_best_trees$tree_depth,
                                mtry = boost_best_stoch$mtry,                   
                                loss_reduction = boost_best_trees$loss_reduction,
                                stop_iter = boost_best_stoch$stop_iter,
                                sample_size = boost_best_stoch$sample_size
                                )

# Set up workflow
wf_boost_final <- workflow() %>% 
  add_recipe(fish_recipe) %>% 
  add_model(boost_final_spec)

final_simple_fit <- wf_boost_final %>% # fit to just training data (need for later)
  fit(data = fish_train)

final_boost_fit <- last_fit(boost_final_spec, IsOfConcern~., fish_split) # does training fit then final prediction as well


# Show predictions
final_boost_pred <- as.data.frame(final_boost_fit$.predictions)
head(final_boost_pred) %>% 
  kable(caption = "Predictions of threat on test data.")

final_boost_met <- final_boost_fit$.metrics # Store metrics
head(final_boost_met) %>% 
  kable(caption = "Accuracy and area under ther receiver operator curve of the final fit.")

# Bind predictions and original data
boost_test_rs <- cbind(fish_test, final_boost_fit$.predictions)
boost_test_rs <- boost_test_rs[, -16] # Remove duplicate column

# Compute a confusion matrix
cm<- boost_test_rs %>% yardstick::conf_mat(truth = IsOfConcern, estimate = .pred_class) 

# View confusion matrix
autoplot(cm, type = "heatmap") +
  theme(axis.text.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        axis.title = element_text(size = 14),
        panel.background = element_rect(fill = "#F8F8F8"),
        plot.background = element_rect(fill = "#F8F8F8")) +
  labs(title = "Figure 2: Confusion matrix of predictions on test data.")

tibble <- final_boost_fit %>% collect_metrics()

final_boost_accuracy <- tibble %>%
  filter(.metric == "accuracy") %>%
  pull(.estimate)

final_boost_auc <- tibble %>%
  filter(.metric == "roc_auc") %>%
  pull(.estimate)
```










### Results

```{r}
models <- c("Dummy", "Lasso", "KNN", "Decision Tree", "Bagging", "Random Forest")
accuracy <- c(dummy, final_lasso_accuracy, final_knn_accuracy, final_tree_accuracy, final_bag_accuracy, final_forest_accuracy)

accuracy_df <- data.frame(models, accuracy)
print(accuracy_df)

ggplot(accuracy_df, aes(x = models, y = accuracy)) +
  geom_col(fill = "#69b3a2") +
  theme_minimal()
```